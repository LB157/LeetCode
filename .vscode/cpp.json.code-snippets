{
    // Place your leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "solution": {
        "prefix": "solution",
        "body": [
            "/**",
            " * @file ${TM_FILENAME}",
            " * @brief",
            " * @author ",
            " * @version 1.0",
            " * @date ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
            " */",
            "#include <bits/stdc++.h>\n",
            "#include \"common/ListNode.hpp\"\n",
            "#include \"common/TreeNode.hpp\"\n",
            "#include <sstream>\n",
            "using namespace std;\n",
            "${CLIPBOARD}\n",
            "int main(int argc, char const *argv[]) {",
            "// ..........输入预处理...........\n\n",
            "//txt文件中的数据用空格",
            "\tstring s = string(PROJECT_PATH).append(\"/${RELATIVE_FILEPATH/(.*)\\..+$/$1/}.txt\");\n\n",
            "\t// 字符 存储每行输入",
            "\tvector<vector<char>> strNums;",
            "\t// 数组 存储每行输入",
            "\tvector<vector<int>> nums;\n\n",
            "\tchar buf[MAX_LINE_SIZE];",
            "\tifstream in(s, ios::binary | ios::in);",
            "\tif(in.is_open()) {",
            "\t\twhile (in.getline(buf, MAX_LINE_SIZE)) {",
            "\t\t\tvector<int> rownums;",
            "\t\t\tvector<char> rowchs;",
            "\t\t\tfor(auto &ch :buf){",
            "\t\t\t\tif(ch=='\\0') break;",
            "\t\t\t\trowchs.push_back(ch);",
            "\t\t\t}",
            "\t\t\tint num;",
            "\t\t\tstd::istringstream ism(buf);",
            "\t\t\twhile(ism>>num){",
            "\t\t\t\trownums.push_back(num);",
            "\t\t\t}",
            "\t\t\tnums.push_back(rownums);",
            "\t\t\tstrNums.push_back(rowchs);",
            "\t\t}",
            "\t}else{",
            "\t\tstd::cout<<\"not open file\"<<std::endl;",
            "\t}",
            "\tin.close();",
            "\t// ..................实现主体...........................",
            "\tSolution sol;\n\n",

            "\tauto ans = sol;",
            "\tstd::cout<<ans<<endl;",
            "\treturn 0;\n}\n"
        ],
        "description": "Leetcode Solution"
    }
}